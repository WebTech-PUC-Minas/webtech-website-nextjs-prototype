"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/universal-github-app-jwt";
exports.ids = ["vendor-chunks/universal-github-app-jwt"];
exports.modules = {

/***/ "(rsc)/./node_modules/universal-github-app-jwt/dist-web/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/universal-github-app-jwt/dist-web/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   githubAppJwt: () => (/* binding */ githubAppJwt)\n/* harmony export */ });\nfunction string2ArrayBuffer(str) {\n    const buf = new ArrayBuffer(str.length);\n    const bufView = new Uint8Array(buf);\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\n        bufView[i] = str.charCodeAt(i);\n    }\n    return buf;\n}\nfunction getDERfromPEM(pem) {\n    const pemB64 = pem\n        .trim()\n        .split(\"\\n\")\n        .slice(1, -1) // Remove the --- BEGIN / END PRIVATE KEY ---\n        .join(\"\");\n    const decoded = atob(pemB64);\n    return string2ArrayBuffer(decoded);\n}\nfunction getEncodedMessage(header, payload) {\n    return `${base64encodeJSON(header)}.${base64encodeJSON(payload)}`;\n}\nfunction base64encode(buffer) {\n    var binary = \"\";\n    var bytes = new Uint8Array(buffer);\n    var len = bytes.byteLength;\n    for (var i = 0; i < len; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n    return fromBase64(btoa(binary));\n}\nfunction fromBase64(base64) {\n    return base64.replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\nfunction base64encodeJSON(obj) {\n    return fromBase64(btoa(JSON.stringify(obj)));\n}\n\nconst getToken = async ({ privateKey, payload, }) => {\n    // WebCrypto only supports PKCS#8, unfortunately\n    if (/BEGIN RSA PRIVATE KEY/.test(privateKey)) {\n        throw new Error(\"[universal-github-app-jwt] Private Key is in PKCS#1 format, but only PKCS#8 is supported. See https://github.com/gr2m/universal-github-app-jwt#readme\");\n    }\n    const algorithm = {\n        name: \"RSASSA-PKCS1-v1_5\",\n        hash: { name: \"SHA-256\" },\n    };\n    const header = { alg: \"RS256\", typ: \"JWT\" };\n    const privateKeyDER = getDERfromPEM(privateKey);\n    const importedKey = await crypto.subtle.importKey(\"pkcs8\", privateKeyDER, algorithm, false, [\"sign\"]);\n    const encodedMessage = getEncodedMessage(header, payload);\n    const encodedMessageArrBuf = string2ArrayBuffer(encodedMessage);\n    const signatureArrBuf = await crypto.subtle.sign(algorithm.name, importedKey, encodedMessageArrBuf);\n    const encodedSignature = base64encode(signatureArrBuf);\n    return `${encodedMessage}.${encodedSignature}`;\n};\n\nasync function githubAppJwt({ id, privateKey, now = Math.floor(Date.now() / 1000), }) {\n    // When creating a JSON Web Token, it sets the \"issued at time\" (iat) to 30s\n    // in the past as we have seen people running situations where the GitHub API\n    // claimed the iat would be in future. It turned out the clocks on the\n    // different machine were not in sync.\n    const nowWithSafetyMargin = now - 30;\n    const expiration = nowWithSafetyMargin + 60 * 10; // JWT expiration time (10 minute maximum)\n    const payload = {\n        iat: nowWithSafetyMargin,\n        exp: expiration,\n        iss: id,\n    };\n    const token = await getToken({\n        privateKey,\n        payload,\n    });\n    return {\n        appId: id,\n        expiration,\n        token,\n    };\n}\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdW5pdmVyc2FsLWdpdGh1Yi1hcHAtand0L2Rpc3Qtd2ViL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsWUFBWTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyx5QkFBeUIsR0FBRywwQkFBMEI7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBCQUEwQixzQkFBc0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGVBQWUsR0FBRyxpQkFBaUI7QUFDakQ7O0FBRUEsOEJBQThCLHNEQUFzRDtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUV3QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bml2ZXJzYWwtZ2l0aHViLWFwcC1qd3QvZGlzdC13ZWIvaW5kZXguanM/YzUyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBzdHJpbmcyQXJyYXlCdWZmZXIoc3RyKSB7XG4gICAgY29uc3QgYnVmID0gbmV3IEFycmF5QnVmZmVyKHN0ci5sZW5ndGgpO1xuICAgIGNvbnN0IGJ1ZlZpZXcgPSBuZXcgVWludDhBcnJheShidWYpO1xuICAgIGZvciAobGV0IGkgPSAwLCBzdHJMZW4gPSBzdHIubGVuZ3RoOyBpIDwgc3RyTGVuOyBpKyspIHtcbiAgICAgICAgYnVmVmlld1tpXSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIH1cbiAgICByZXR1cm4gYnVmO1xufVxuZnVuY3Rpb24gZ2V0REVSZnJvbVBFTShwZW0pIHtcbiAgICBjb25zdCBwZW1CNjQgPSBwZW1cbiAgICAgICAgLnRyaW0oKVxuICAgICAgICAuc3BsaXQoXCJcXG5cIilcbiAgICAgICAgLnNsaWNlKDEsIC0xKSAvLyBSZW1vdmUgdGhlIC0tLSBCRUdJTiAvIEVORCBQUklWQVRFIEtFWSAtLS1cbiAgICAgICAgLmpvaW4oXCJcIik7XG4gICAgY29uc3QgZGVjb2RlZCA9IGF0b2IocGVtQjY0KTtcbiAgICByZXR1cm4gc3RyaW5nMkFycmF5QnVmZmVyKGRlY29kZWQpO1xufVxuZnVuY3Rpb24gZ2V0RW5jb2RlZE1lc3NhZ2UoaGVhZGVyLCBwYXlsb2FkKSB7XG4gICAgcmV0dXJuIGAke2Jhc2U2NGVuY29kZUpTT04oaGVhZGVyKX0uJHtiYXNlNjRlbmNvZGVKU09OKHBheWxvYWQpfWA7XG59XG5mdW5jdGlvbiBiYXNlNjRlbmNvZGUoYnVmZmVyKSB7XG4gICAgdmFyIGJpbmFyeSA9IFwiXCI7XG4gICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICB2YXIgbGVuID0gYnl0ZXMuYnl0ZUxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGJpbmFyeSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGZyb21CYXNlNjQoYnRvYShiaW5hcnkpKTtcbn1cbmZ1bmN0aW9uIGZyb21CYXNlNjQoYmFzZTY0KSB7XG4gICAgcmV0dXJuIGJhc2U2NC5yZXBsYWNlKC89L2csIFwiXCIpLnJlcGxhY2UoL1xcKy9nLCBcIi1cIikucmVwbGFjZSgvXFwvL2csIFwiX1wiKTtcbn1cbmZ1bmN0aW9uIGJhc2U2NGVuY29kZUpTT04ob2JqKSB7XG4gICAgcmV0dXJuIGZyb21CYXNlNjQoYnRvYShKU09OLnN0cmluZ2lmeShvYmopKSk7XG59XG5cbmNvbnN0IGdldFRva2VuID0gYXN5bmMgKHsgcHJpdmF0ZUtleSwgcGF5bG9hZCwgfSkgPT4ge1xuICAgIC8vIFdlYkNyeXB0byBvbmx5IHN1cHBvcnRzIFBLQ1MjOCwgdW5mb3J0dW5hdGVseVxuICAgIGlmICgvQkVHSU4gUlNBIFBSSVZBVEUgS0VZLy50ZXN0KHByaXZhdGVLZXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlt1bml2ZXJzYWwtZ2l0aHViLWFwcC1qd3RdIFByaXZhdGUgS2V5IGlzIGluIFBLQ1MjMSBmb3JtYXQsIGJ1dCBvbmx5IFBLQ1MjOCBpcyBzdXBwb3J0ZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZ3IybS91bml2ZXJzYWwtZ2l0aHViLWFwcC1qd3QjcmVhZG1lXCIpO1xuICAgIH1cbiAgICBjb25zdCBhbGdvcml0aG0gPSB7XG4gICAgICAgIG5hbWU6IFwiUlNBU1NBLVBLQ1MxLXYxXzVcIixcbiAgICAgICAgaGFzaDogeyBuYW1lOiBcIlNIQS0yNTZcIiB9LFxuICAgIH07XG4gICAgY29uc3QgaGVhZGVyID0geyBhbGc6IFwiUlMyNTZcIiwgdHlwOiBcIkpXVFwiIH07XG4gICAgY29uc3QgcHJpdmF0ZUtleURFUiA9IGdldERFUmZyb21QRU0ocHJpdmF0ZUtleSk7XG4gICAgY29uc3QgaW1wb3J0ZWRLZXkgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmltcG9ydEtleShcInBrY3M4XCIsIHByaXZhdGVLZXlERVIsIGFsZ29yaXRobSwgZmFsc2UsIFtcInNpZ25cIl0pO1xuICAgIGNvbnN0IGVuY29kZWRNZXNzYWdlID0gZ2V0RW5jb2RlZE1lc3NhZ2UoaGVhZGVyLCBwYXlsb2FkKTtcbiAgICBjb25zdCBlbmNvZGVkTWVzc2FnZUFyckJ1ZiA9IHN0cmluZzJBcnJheUJ1ZmZlcihlbmNvZGVkTWVzc2FnZSk7XG4gICAgY29uc3Qgc2lnbmF0dXJlQXJyQnVmID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5zaWduKGFsZ29yaXRobS5uYW1lLCBpbXBvcnRlZEtleSwgZW5jb2RlZE1lc3NhZ2VBcnJCdWYpO1xuICAgIGNvbnN0IGVuY29kZWRTaWduYXR1cmUgPSBiYXNlNjRlbmNvZGUoc2lnbmF0dXJlQXJyQnVmKTtcbiAgICByZXR1cm4gYCR7ZW5jb2RlZE1lc3NhZ2V9LiR7ZW5jb2RlZFNpZ25hdHVyZX1gO1xufTtcblxuYXN5bmMgZnVuY3Rpb24gZ2l0aHViQXBwSnd0KHsgaWQsIHByaXZhdGVLZXksIG5vdyA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApLCB9KSB7XG4gICAgLy8gV2hlbiBjcmVhdGluZyBhIEpTT04gV2ViIFRva2VuLCBpdCBzZXRzIHRoZSBcImlzc3VlZCBhdCB0aW1lXCIgKGlhdCkgdG8gMzBzXG4gICAgLy8gaW4gdGhlIHBhc3QgYXMgd2UgaGF2ZSBzZWVuIHBlb3BsZSBydW5uaW5nIHNpdHVhdGlvbnMgd2hlcmUgdGhlIEdpdEh1YiBBUElcbiAgICAvLyBjbGFpbWVkIHRoZSBpYXQgd291bGQgYmUgaW4gZnV0dXJlLiBJdCB0dXJuZWQgb3V0IHRoZSBjbG9ja3Mgb24gdGhlXG4gICAgLy8gZGlmZmVyZW50IG1hY2hpbmUgd2VyZSBub3QgaW4gc3luYy5cbiAgICBjb25zdCBub3dXaXRoU2FmZXR5TWFyZ2luID0gbm93IC0gMzA7XG4gICAgY29uc3QgZXhwaXJhdGlvbiA9IG5vd1dpdGhTYWZldHlNYXJnaW4gKyA2MCAqIDEwOyAvLyBKV1QgZXhwaXJhdGlvbiB0aW1lICgxMCBtaW51dGUgbWF4aW11bSlcbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgICBpYXQ6IG5vd1dpdGhTYWZldHlNYXJnaW4sXG4gICAgICAgIGV4cDogZXhwaXJhdGlvbixcbiAgICAgICAgaXNzOiBpZCxcbiAgICB9O1xuICAgIGNvbnN0IHRva2VuID0gYXdhaXQgZ2V0VG9rZW4oe1xuICAgICAgICBwcml2YXRlS2V5LFxuICAgICAgICBwYXlsb2FkLFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGFwcElkOiBpZCxcbiAgICAgICAgZXhwaXJhdGlvbixcbiAgICAgICAgdG9rZW4sXG4gICAgfTtcbn1cblxuZXhwb3J0IHsgZ2l0aHViQXBwSnd0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/universal-github-app-jwt/dist-web/index.js\n");

/***/ })

};
;